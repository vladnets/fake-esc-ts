{"version":3,"sources":["webpack://@vladnets/fake-ecs-ts/./src/Entity.ts","webpack://@vladnets/fake-ecs-ts/./src/EntityContainer.ts","webpack://@vladnets/fake-ecs-ts/./src/EntityContainerManager.ts","webpack://@vladnets/fake-ecs-ts/./src/EntityManager.ts","webpack://@vladnets/fake-ecs-ts/./src/EntityQuery.ts","webpack://@vladnets/fake-ecs-ts/./src/Sign.ts","webpack://@vladnets/fake-ecs-ts/./src/SignManager.ts","webpack://@vladnets/fake-ecs-ts/./src/Type.ts","webpack://@vladnets/fake-ecs-ts/./src/TypeManager.ts","webpack://@vladnets/fake-ecs-ts/./src/extensions/ComponentsExtension.ts","webpack://@vladnets/fake-ecs-ts/./src/extensions/EntityExtension.ts","webpack://@vladnets/fake-ecs-ts/./src/extensions/ExtensionBase.ts","webpack://@vladnets/fake-ecs-ts/./src/extensions/QueryExtension.ts","webpack://@vladnets/fake-ecs-ts/webpack/bootstrap","webpack://@vladnets/fake-ecs-ts/./src/index.ts"],"names":["Entity","id","container","index","sign","types","typeManager","this","count","entities","components","forEach","type","component","push","addEntity","entity","values","length","valueIndex","removeEntity","removedValues","lastIndex","_removeLast","_swapWithLast","getComponent","Constructor","getType","i","lastEntity","EntityContainer","signManager","containers","containersMap","_init","create","addContainer","context","parts","getContainer","EntityContainerManager","_entities","_entitiesPool","_queries","_typeManager","_signManager","_containerManager","entitiesPool","queries","containerManager","_entityExt","EntityExtension","_componentsExt","ComponentsExtension","_queryExt","QueryExtension","registerComponent","register","createEntity","entityId","setComponents","removeComponents","Constructors","createQuery","include","exclude","EntityManager","includeSign","excludeSign","tryAddContainer","includes","excludes","EntityQuery","otherSign","every","part","otherPart","clone","Sign","addTypes","mask","rest","signPartsCount","createEmpty","createFromTypes","SignManager","Type","registry","WeakMap","nextId","nextPart","nextPartIndex","halfMaxPart","Math","pow","constructor","get","existed","signature","set","TypeManager","oldContainer","addingTypes","_getTypesFromValues","oldTypes","allTypes","newContainer","_findOrCreateContainer","allValues","removingTypes","_getTypesFromConstructors","newTypes","filter","console","log","ExtensionBase","_createOrReuseEntity","pop","_createContainer","query","map","value","includeTypes","excludeTypes","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"mappings":"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","file":"index.js","sourcesContent":["import { EntityContainer } from './EntityContainer';\n\nexport class Entity {\n  constructor(\n    public readonly id: number,\n    public container: EntityContainer = null,\n    public index: number = -1\n  ) { }\n}\n","import { Entity } from './Entity';\nimport { IConstructor } from './IConstructor';\nimport { Sign } from './Sign';\nimport { Type } from './Type';\nimport { TypeManager } from './TypeManager';\n\nexport class EntityContainer {\n  sign: Sign;\n  types: Type[];\n\n  typeManager: TypeManager<IConstructor<any>>;\n\n  count: number;\n  entities: Entity[];\n  components: any[][];\n  [component: number]: any[];\n\n  constructor(sign: Sign, types: Type[], typeManager: TypeManager<IConstructor<any>>) {\n    this.sign = sign;\n    this.types = types;\n\n    this.typeManager = typeManager;\n\n    this.count = 0;\n    this.entities = [];\n    this.components = [];\n\n    this.types.forEach(type => {\n      if (this[type.id]) return;\n\n      const component: any[] = [];\n      this.components.push(component);\n      this[type.id] = component;\n    });\n  }\n\n  addEntity(entity: Entity, types: Type[], values: any[]) {\n    const index = this.count;\n\n    // reuse entity slot\n    if (index < this.entities.length) {\n      this.entities[index] = entity;\n      types.forEach((type, valueIndex) => {\n        if (!this[type.id]) return;\n\n        this[type.id][index] = values[valueIndex];\n      });\n    }\n    // push new entity slot\n    else {\n      this.entities.push(entity);\n      types.forEach((type, valueIndex) => {\n        if (!this[type.id]) return;\n\n        this[type.id].push(values[valueIndex]);\n      });\n    }\n\n    entity.index = index;\n    entity.container = this;\n\n    this.count++;\n    return index;\n  }\n\n  // returns removed values\n  removeEntity(entity: Entity): any[] {\n    const lastIndex = this.count - 1;\n\n    let removedValues: any[];\n    if (entity.index === lastIndex) {\n      removedValues = this._removeLast();\n    } else {\n      removedValues = this._swapWithLast(entity.index);\n    }\n\n    entity.index = -1;\n    entity.container = null;\n\n    this.count--;\n    return removedValues;\n  }\n\n  getComponent<T>(Constructor: IConstructor<T>): T[] {\n    const type = this.typeManager.getType(Constructor);\n    return this[type.id];\n  }\n\n  private _removeLast() {\n    const lastIndex = this.count - 1;\n\n    this.entities[lastIndex] = null;\n\n    const removedValues: any[] = [];\n    const length = this.types.length;\n    for(let i = 0; i < length; i++) {\n      const component = this.components[i];\n      removedValues.push(component[lastIndex]);\n      component[lastIndex] = null;\n    }\n\n    return removedValues;\n  }\n\n  private _swapWithLast(index: number) {\n    const lastIndex = this.count - 1;\n    const lastEntity = this.entities[lastIndex];\n\n    this.entities[index] = lastEntity;\n    this.entities[lastIndex] = null;\n\n    const removedValues: any[] = [];\n    const length = this.types.length;\n    for(let i = 0; i < length; i++) {\n      const component = this.components[i];\n      removedValues.push(component[index]);\n      component[index] = component[lastIndex];\n      component[lastIndex] = null;\n    }\n\n    lastEntity.index = index;\n\n    return removedValues;\n  }\n}\n","import { EntityContainer } from './EntityContainer';\nimport { IConstructor } from \"./IConstructor\";\nimport { Type } from './Type';\nimport { SignManager } from './SignManager';\nimport { Sign } from './Sign';\nimport { TypeManager } from './TypeManager';\n\ntype IEntityContainerManagerLevel<T> = { [id: number]: T | IEntityContainerManagerLevel<T> }\nexport class EntityContainerManager {\n  readonly typeManager: TypeManager<IConstructor<any>>;\n  readonly signManager: SignManager;\n  readonly containers: EntityContainer[];\n  readonly containersMap: IEntityContainerManagerLevel<EntityContainer>;\n\n  constructor(\n    typeManager: TypeManager<IConstructor<any>>\n  ) {\n    this.typeManager = typeManager;\n    this.signManager = this.typeManager.signManager;\n    this.containers = [];\n    this.containersMap = {};\n    this._init();\n  }\n\n  create(sign: Sign, types: Type[]) {\n    const container: EntityContainer = new EntityContainer(sign, types, this.typeManager);\n\n    this.addContainer(container);\n    return container;\n  }\n\n  addContainer(container: EntityContainer) {\n    let context = this.containersMap;\n\n    const sign = container.sign;\n    for(let i = 0; i < sign.parts.length - 1; i++) {\n      const id = sign.parts[i];\n\n      if (!context[id]) {\n        context[id] = {};\n      }\n\n      context = context[id] as any;\n    }\n\n    this.containers.push(container);\n    context[sign.parts[sign.parts.length - 1]] = container;\n  }\n\n  getContainer(sign: Sign): undefined | EntityContainer {\n    let context = this.containersMap;\n\n    for(let i = 0; i < sign.parts.length; i++) {\n      const id = sign.parts[i];\n\n      if (!context[id]) {\n        return;\n      }\n\n      context = context[id] as any;\n    }\n\n    return (context as any) as EntityContainer;\n  }\n\n  private _init() {\n    // let context = this.containers;\n    // for(let i = 0; i < this.signManager.signPartsCount; i++) {\n    //   context[0] = {};\n    //   context = context[0];\n    // }\n  }\n}\n","import { EntityQuery } from './EntityQuery';\nimport { SignManager } from './SignManager';\nimport { EntityContainerManager } from './EntityContainerManager';\nimport { TypeManager } from './TypeManager';\nimport { Entity } from './Entity';\nimport { EntityExtension } from './extensions/EntityExtension';\nimport { IExtensionContext } from './extensions/ExtensionBase';\nimport { ComponentsExtension } from './extensions/ComponentsExtension';\nimport { Type } from './Type';\nimport { QueryExtension } from './extensions/QueryExtension';\n\nexport class EntityManager {\n  private _entities: Entity[];\n  private _entitiesPool: Entity[];\n\n  private _queries: EntityQuery[];\n\n  private _typeManager: TypeManager<any>;\n  private _signManager: SignManager;\n  private _containerManager: EntityContainerManager;\n\n  private _entityExt: EntityExtension;\n  private _componentsExt: ComponentsExtension;\n  private _queryExt: QueryExtension;\n\n  constructor(typeManager: TypeManager<any>) {\n    this._entities = [];\n    this._entitiesPool = [];\n    this._queries = [];\n    this._typeManager = typeManager;\n    this._signManager = typeManager.signManager;\n    this._containerManager = new EntityContainerManager(this._typeManager);\n\n    const context: IExtensionContext = {\n      entities: this._entities,\n      entitiesPool: this._entitiesPool,\n      queries: this._queries,\n      typeManager: this._typeManager,\n      signManager: this._signManager,\n      containerManager: this._containerManager\n    };\n\n    this._entityExt = new EntityExtension(context);\n    this._componentsExt = new ComponentsExtension(context);\n    this._queryExt = new QueryExtension(context);\n  }\n\n  registerComponent(Constructor: any) {\n    this._typeManager.register(Constructor);\n  }\n\n  createEntity(...values: any[]): number {\n    return this._entityExt.createEntity(values);\n  }\n\n  removeEntity(entityId: number) {\n    this._entityExt.removeEntity(entityId);\n  }\n\n  setComponents(entityId: number, ...values: any[]) {\n    this._componentsExt.setComponents(entityId, values);\n  }\n\n  removeComponents(entityId: number, ...Constructors: any[]) {\n    this._componentsExt.removeComponents(entityId, Constructors);\n  }\n\n  createQuery(include: any[], exclude: any[]): EntityQuery {\n    return this._queryExt.createQuery(include, exclude);\n  }\n}\n\n\n\n","import { EntityContainer } from './EntityContainer';\nimport { Sign } from './Sign';\n\nexport class EntityQuery {\n  readonly includeSign: Sign;\n  readonly excludeSign: Sign;\n  readonly containers: EntityContainer[];\n\n  constructor(includeSign: Sign, excludeSign: Sign) {\n    this.includeSign = includeSign;\n    this.excludeSign = excludeSign;\n    this.containers = [];\n  }\n\n  // `true` if container matches group requirements, `false` otherwise\n  tryAddContainer(container: EntityContainer): boolean {\n    if (!container.sign.includes(this.includeSign) || !container.sign.excludes(this.excludeSign)) {\n      return false;\n    }\n\n    this.containers.push(container);\n    return true;\n  }\n}\n","import { Type } from './Type';\n\nexport class Sign {\n  constructor(\n    readonly parts: number[]\n  ) {}\n\n  includes(otherSign: Sign): boolean {\n    return this.parts.every((part, index) => {\n      const otherPart = otherSign.parts[index];\n      return (part & otherPart) === otherPart;\n    });\n  }\n\n  excludes(otherSign: Sign): boolean {\n    return this.parts.every((part, index) => {\n      const otherPart = otherSign.parts[index];\n      return (part & otherPart) === 0;\n    });\n  }\n\n  clone(): Sign {\n    return new Sign([...this.parts]);\n  }\n\n  addTypes(types: Type[]): void {\n    types.forEach(type => {\n      type.sign.parts.forEach((mask, index) => {\n        const thisMask = this.parts[index];\n\n        const rest = (thisMask & mask);\n        this.parts[index] += (mask - rest);\n      });\n    });\n  }\n}\n","import { Type } from './Type';\nimport { Sign } from './Sign';\n\nexport class SignManager {\n\n  constructor(\n    public readonly signPartsCount: number\n  ) { }\n\n  createEmpty() {\n    const parts: number[] = [];\n\n    const count = this.signPartsCount;\n    for (let i = 0; i < count; i++) {\n      parts.push(0);\n    }\n\n    return new Sign(parts);\n  }\n\n  createFromTypes(types: Type[]): Sign {\n    const sign = this.createEmpty();\n    sign.addTypes(types);\n\n    return sign;\n  }\n}\n","import { Sign } from './Sign';\n\nexport class Type {\n  constructor(\n    public readonly id: number,\n    public readonly sign: Sign\n  ) {}\n}\n\n","import { SignManager } from './SignManager';\nimport { Type } from './Type';\n\n\nexport class TypeManager<T extends object> {\n  readonly registry: WeakMap<T, Type>;\n  readonly signManager: SignManager;\n\n  nextId: number;\n  nextPart: number;\n  nextPartIndex: number;\n  halfMaxPart: number;\n\n  constructor(signManager: SignManager) {\n    this.registry = new WeakMap();\n    this.signManager = signManager;\n\n    this.nextId = 0;\n    this.nextPart = 2;\n    this.nextPartIndex = 0;\n    this.halfMaxPart = Math.pow(2, 30) / 2;\n  }\n\n  getType(constructor: T) {\n    return this.registry.get(constructor);\n  }\n\n  register(constructor: T) {\n    const existed = this.registry.get(constructor);\n    if (existed) {\n      return existed;\n    }\n\n    const signature = this.signManager.createEmpty();\n    signature.parts[this.nextPartIndex] = this.nextPart;\n\n    const type = new Type(this.nextId, signature);\n    this.registry.set(constructor, type);\n\n    if (this.nextPart > this.halfMaxPart) {\n      this.nextPart = 2;\n      this.nextPartIndex++;\n    } else {\n      this.nextPart *= 2;\n    }\n\n    this.nextId++;\n\n    return type;\n  }\n}\n","import { Type } from '../Type';\nimport { Sign } from '../Sign';\nimport { Entity } from '../Entity';\nimport { ExtensionBase } from './ExtensionBase';\n\nexport class ComponentsExtension extends ExtensionBase {\n  setComponents(entityId: number, values: any[]) {\n    const entity = this.entities[entityId];\n\n    const oldContainer = entity.container;\n\n    const addingTypes = this._getTypesFromValues(values);\n    const oldTypes = oldContainer.types;\n\n    const allTypes = [...addingTypes, ...oldTypes];\n    const sign = this.signManager.createFromTypes(allTypes);\n\n    const newContainer = this._findOrCreateContainer(sign, allTypes);\n\n    const removedValues = oldContainer.removeEntity(entity);\n    const allValues = [...values, ...removedValues];\n\n    newContainer.addEntity(entity, allTypes, allValues);\n  }\n\n  removeComponents(entityId: number, Constructors: any[]) {\n    const entity = this.entities[entityId];\n\n    const oldContainer = entity.container;\n\n    const removingTypes = this._getTypesFromConstructors(Constructors);\n    const oldTypes = oldContainer.types;\n    const newTypes = oldTypes.filter(type => !removingTypes.includes(type));\n\n    const sign = this.signManager.createFromTypes(newTypes);\n\n    const newContainer = this._findOrCreateContainer(sign, newTypes);\n\n    const removedValues = oldContainer.removeEntity(entity);\n\n    if (!newContainer.addEntity) {\n      console.log(sign, newTypes, this);\n    }\n    newContainer.addEntity(entity, oldTypes, removedValues);\n  }\n}\n","import { Type } from '../Type';\nimport { Sign } from '../Sign';\nimport { Entity } from '../Entity';\nimport { ExtensionBase } from './ExtensionBase';\n\nexport class EntityExtension extends ExtensionBase {\n  createEntity(values: any[]) {\n    const entity = this._createOrReuseEntity();\n    const types = this._getTypesFromValues(values);\n    const sign = this.signManager.createFromTypes(types);\n    const container = this._findOrCreateContainer(sign, types);\n\n    container.addEntity(entity, types, values);\n\n    return entity.id;\n  }\n\n  removeEntity(entityId: number) {\n    const entity = this.entities[entityId];\n    entity.container.removeEntity(entity);\n    this.entitiesPool.push(entity);\n  }\n\n  private _createOrReuseEntity() {\n    let entity;\n\n    if (this.entitiesPool.length > 0) {\n      entity = this.entitiesPool.pop();\n    }\n    else {\n      entity = new Entity(this.entities.length);\n      this.entities.push(entity);\n    }\n\n    return entity;\n  }\n}\n","import { Entity } from '../Entity';\nimport { EntityContainerManager } from '../EntityContainerManager';\nimport { EntityQuery } from '../EntityQuery';\nimport { Sign } from '../Sign';\nimport { SignManager } from '../SignManager';\nimport { Type } from '../Type';\nimport { TypeManager } from '../TypeManager';\n\nexport interface IExtensionContext {\n  entities: Entity[];\n  entitiesPool: Entity[];\n\n  queries: EntityQuery[];\n\n  typeManager: TypeManager<any>;\n  signManager: SignManager;\n  containerManager: EntityContainerManager;\n}\n\nexport abstract class ExtensionBase {\n  entities: Entity[];\n  entitiesPool: Entity[];\n  queries: EntityQuery[];\n  typeManager: TypeManager<any>;\n  signManager: SignManager;\n  containerManager: EntityContainerManager;\n\n  constructor(\n    context: IExtensionContext\n  ) {\n    this.entities = context.entities;\n    this.entitiesPool = context.entitiesPool;\n    this.queries = context.queries;\n    this.typeManager = context.typeManager;\n    this.signManager = context.signManager;\n    this.containerManager = context.containerManager;\n  }\n\n  protected _findOrCreateContainer(sign: Sign, types: Type[]) {\n    const existedContainer = this.containerManager.getContainer(sign);\n\n    if (existedContainer) {\n      return existedContainer;\n    }\n\n    return this._createContainer(sign, types);\n  }\n\n  protected _createContainer(sign: Sign, types: Type[]) {\n    const container = this.containerManager.create(sign, types);\n    this.queries.forEach(query => query.tryAddContainer(container));\n\n    return container;\n  }\n\n  protected _getTypesFromValues(values: any[]) {\n    return values.map(value => this.typeManager.getType(value.constructor));\n  }\n\n  protected _getTypesFromConstructors(Constructors: any[]) {\n    return Constructors.map(Constructor => this.typeManager.getType(Constructor));\n  }\n}\n","import { Type } from '../Type';\nimport { Sign } from '../Sign';\nimport { Entity } from '../Entity';\nimport { ExtensionBase } from './ExtensionBase';\nimport { EntityQuery } from '../EntityQuery';\n\nexport class QueryExtension extends ExtensionBase {\n  createQuery(include: any[], exclude: any[]): EntityQuery {\n    const includeTypes = this._getTypesFromConstructors(include);\n    const excludeTypes = this._getTypesFromConstructors(exclude);\n\n    const includeSign = this.signManager.createFromTypes(includeTypes);\n    const excludeSign = this.signManager.createFromTypes(excludeTypes);\n    const query = new EntityQuery(includeSign, excludeSign);\n\n    this.queries.push(query);\n    this.containerManager.containers.forEach(container => query.tryAddContainer(container));\n\n    return query;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export { Entity } from './Entity';\nexport { EntityContainer } from './EntityContainer';\nexport { EntityContainerManager } from './EntityContainerManager';\nexport { EntityManager } from './EntityManager';\nexport { EntityQuery } from './EntityQuery';\n\nexport { Sign } from './Sign';\nexport { SignManager } from './SignManager';\nexport { Type } from './Type';\nexport { TypeManager } from './TypeManager';\n"],"sourceRoot":""}