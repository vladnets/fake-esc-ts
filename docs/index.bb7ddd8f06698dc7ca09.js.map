{"version":3,"sources":["webpack://@vladnets/fake-ecs-ts/./src/entities/Entity.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/EntityContainer.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/EntityContainerManager.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/EntityManager.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/EntityQuery.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/Sign.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/SignManager.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/Type.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/TypeManager.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/extensions/ComponentsExtension.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/extensions/EntityExtension.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/extensions/ExtensionBase.ts","webpack://@vladnets/fake-ecs-ts/./src/entities/extensions/QueryExtension.ts","webpack://@vladnets/fake-ecs-ts/./src/test.ts","webpack://@vladnets/fake-ecs-ts/webpack/bootstrap","webpack://@vladnets/fake-ecs-ts/./src/index.ts"],"names":["constructor","id","container","index","sign","types","typeManager","this","count","entities","components","forEach","type","component","push","addEntity","entity","values","length","valueIndex","removeEntity","lastIndex","removedValues","_removeLast","_swapWithLast","getComponent","Constructor","getType","i","lastEntity","signManager","containers","containersMap","_init","create","EntityContainer","addContainer","context","parts","getContainer","_entities","_entitiesPool","_queries","_typeManager","_signManager","_containerManager","EntityContainerManager","entitiesPool","queries","containerManager","_entityExt","EntityExtension","_componentsExt","ComponentsExtension","_queryExt","QueryExtension","registerComponent","register","createEntity","entityId","setComponents","removeComponents","Constructors","createQuery","include","exclude","includeSign","excludeSign","tryAddContainer","includes","excludes","Sign","otherSign","every","part","otherPart","clone","addTypes","mask","rest","signPartsCount","createEmpty","createFromTypes","registry","WeakMap","nextId","nextPart","nextPartIndex","halfMaxPart","Math","pow","get","existed","signature","Type","set","ExtensionBase","oldContainer","allTypes","_getTypesFromValues","newContainer","_findOrCreateContainer","allValues","removingTypes","_getTypesFromConstructors","oldTypes","newTypes","filter","console","log","_createOrReuseEntity","pop","Entity","_createContainer","query","map","value","includeTypes","excludeTypes","EntityQuery","ENTITIES_COUNT","window","MoveTarget","source","target","speed","isDone","MoveTargetDoneTag","LoadingProgress","sm","SignManager","tm","TypeManager","em","EntityManager","textView","document","querySelector","loadingProgressQuery","moveProgressQuery","moveDoneQuery","fps","sum","startTime","Date","now","update","dataArray","loadOptions","moveArray","move","endTime","innerHTML","requestAnimationFrame","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"mappings":"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","file":"index.bb7ddd8f06698dc7ca09.js","sourcesContent":["import { EntityContainer } from './EntityContainer';\n\nexport class Entity {\n  constructor(\n    public readonly id: number,\n    public container: EntityContainer = null,\n    public index: number = -1\n  ) { }\n}\n","import { Entity } from './Entity';\nimport { IConstructor } from './IConstructor';\nimport { Sign } from './Sign';\nimport { Type } from './Type';\nimport { TypeManager } from './TypeManager';\n\nexport class EntityContainer {\n  sign: Sign;\n  types: Type[];\n\n  typeManager: TypeManager<IConstructor<any>>;\n\n  count: number;\n  entities: Entity[];\n  components: any[][];\n  [component: number]: any[];\n\n  constructor(sign: Sign, types: Type[], typeManager: TypeManager<IConstructor<any>>) {\n    this.sign = sign;\n    this.types = types;\n\n    this.typeManager = typeManager;\n\n    this.count = 0;\n    this.entities = [];\n    this.components = [];\n\n    this.types.forEach(type => {\n      if (this[type.id]) return;\n\n      const component: any[] = [];\n      this.components.push(component);\n      this[type.id] = component;\n    });\n  }\n\n  addEntity(entity: Entity, types: Type[], values: any[]) {\n    const index = this.count;\n\n    // reuse entity slot\n    if (index < this.entities.length) {\n      this.entities[index] = entity;\n      types.forEach((type, valueIndex) => {\n        if (!this[type.id]) return;\n\n        this[type.id][index] = values[valueIndex];\n      });\n    }\n    // push new entity slot\n    else {\n      this.entities.push(entity);\n      types.forEach((type, valueIndex) => {\n        if (!this[type.id]) return;\n\n        this[type.id].push(values[valueIndex]);\n      });\n    }\n\n    entity.index = index;\n    entity.container = this;\n\n    this.count++;\n    return index;\n  }\n\n  // returns removed values\n  removeEntity(entity: Entity): any[] {\n    const lastIndex = this.count - 1;\n\n    let removedValues: any[];\n    if (entity.index === lastIndex) {\n      removedValues = this._removeLast();\n    } else {\n      removedValues = this._swapWithLast(entity.index);\n    }\n\n    entity.index = -1;\n    entity.container = null;\n\n    this.count--;\n    return removedValues;\n  }\n\n  getComponent<T>(Constructor: IConstructor<T>): T[] {\n    const type = this.typeManager.getType(Constructor);\n    return this[type.id];\n  }\n\n  private _removeLast() {\n    const lastIndex = this.count - 1;\n\n    this.entities[lastIndex] = null;\n\n    const removedValues: any[] = [];\n    const length = this.types.length;\n    for(let i = 0; i < length; i++) {\n      const component = this.components[i];\n      removedValues.push(component[lastIndex]);\n      component[lastIndex] = null;\n    }\n\n    return removedValues;\n  }\n\n  private _swapWithLast(index: number) {\n    const lastIndex = this.count - 1;\n    const lastEntity = this.entities[lastIndex];\n\n    this.entities[index] = lastEntity;\n    this.entities[lastIndex] = null;\n\n    const removedValues: any[] = [];\n    const length = this.types.length;\n    for(let i = 0; i < length; i++) {\n      const component = this.components[i];\n      removedValues.push(component[index]);\n      component[index] = component[lastIndex];\n      component[lastIndex] = null;\n    }\n\n    lastEntity.index = index;\n\n    return removedValues;\n  }\n}\n","import { EntityContainer } from './EntityContainer';\nimport { IConstructor } from \"./IConstructor\";\nimport { Type } from './Type';\nimport { SignManager } from './SignManager';\nimport { Sign } from './Sign';\nimport { TypeManager } from './TypeManager';\n\ntype IEntityContainerManagerLevel<T> = { [id: number]: T | IEntityContainerManagerLevel<T> }\nexport class EntityContainerManager {\n  readonly typeManager: TypeManager<IConstructor<any>>;\n  readonly signManager: SignManager;\n  readonly containers: EntityContainer[];\n  readonly containersMap: IEntityContainerManagerLevel<EntityContainer>;\n\n  constructor(\n    typeManager: TypeManager<IConstructor<any>>\n  ) {\n    this.typeManager = typeManager;\n    this.signManager = this.typeManager.signManager;\n    this.containers = [];\n    this.containersMap = {};\n    this._init();\n  }\n\n  create(sign: Sign, types: Type[]) {\n    const container: EntityContainer = new EntityContainer(sign, types, this.typeManager);\n\n    this.addContainer(container);\n    return container;\n  }\n\n  addContainer(container: EntityContainer) {\n    let context = this.containersMap;\n\n    const sign = container.sign;\n    for(let i = 0; i < sign.parts.length - 1; i++) {\n      const id = sign.parts[i];\n\n      if (!context[id]) {\n        context[id] = {};\n      }\n\n      context = context[id] as any;\n    }\n\n    this.containers.push(container);\n    context[sign.parts[sign.parts.length - 1]] = container;\n  }\n\n  getContainer(sign: Sign): undefined | EntityContainer {\n    let context = this.containersMap;\n\n    for(let i = 0; i < sign.parts.length; i++) {\n      const id = sign.parts[i];\n\n      if (!context[id]) {\n        return;\n      }\n\n      context = context[id] as any;\n    }\n\n    return (context as any) as EntityContainer;\n  }\n\n  private _init() {\n    // let context = this.containers;\n    // for(let i = 0; i < this.signManager.signPartsCount; i++) {\n    //   context[0] = {};\n    //   context = context[0];\n    // }\n  }\n}\n","import { EntityQuery } from './EntityQuery';\nimport { SignManager } from './SignManager';\nimport { EntityContainerManager } from './EntityContainerManager';\nimport { TypeManager } from './TypeManager';\nimport { Entity } from './Entity';\nimport { EntityExtension } from './extensions/EntityExtension';\nimport { IExtensionContext } from './extensions/ExtensionBase';\nimport { ComponentsExtension } from './extensions/ComponentsExtension';\nimport { Type } from './Type';\nimport { QueryExtension } from './extensions/QueryExtension';\n\nexport class EntityManager {\n  private _entities: Entity[];\n  private _entitiesPool: Entity[];\n\n  private _queries: EntityQuery[];\n\n  private _typeManager: TypeManager<any>;\n  private _signManager: SignManager;\n  private _containerManager: EntityContainerManager;\n\n  private _entityExt: EntityExtension;\n  private _componentsExt: ComponentsExtension;\n  private _queryExt: QueryExtension;\n\n  constructor(typeManager: TypeManager<any>) {\n    this._entities = [];\n    this._entitiesPool = [];\n    this._queries = [];\n    this._typeManager = typeManager;\n    this._signManager = typeManager.signManager;\n    this._containerManager = new EntityContainerManager(this._typeManager);\n\n    const context: IExtensionContext = {\n      entities: this._entities,\n      entitiesPool: this._entitiesPool,\n      queries: this._queries,\n      typeManager: this._typeManager,\n      signManager: this._signManager,\n      containerManager: this._containerManager\n    };\n\n    this._entityExt = new EntityExtension(context);\n    this._componentsExt = new ComponentsExtension(context);\n    this._queryExt = new QueryExtension(context);\n  }\n\n  registerComponent(Constructor: any) {\n    this._typeManager.register(Constructor);\n  }\n\n  createEntity(...values: any[]): number {\n    return this._entityExt.createEntity(values);\n  }\n\n  removeEntity(entityId: number) {\n    this._entityExt.removeEntity(entityId);\n  }\n\n  setComponents(entityId: number, ...values: any[]) {\n    this._componentsExt.setComponents(entityId, values);\n  }\n\n  removeComponents(entityId: number, ...Constructors: any[]) {\n    this._componentsExt.removeComponents(entityId, Constructors);\n  }\n\n  createQuery(include: any[], exclude: any[]): EntityQuery {\n    return this._queryExt.createQuery(include, exclude);\n  }\n}\n\n\n\n","import { EntityContainer } from './EntityContainer';\nimport { Sign } from './Sign';\n\nexport class EntityQuery {\n  readonly includeSign: Sign;\n  readonly excludeSign: Sign;\n  readonly containers: EntityContainer[];\n\n  constructor(includeSign: Sign, excludeSign: Sign) {\n    this.includeSign = includeSign;\n    this.excludeSign = excludeSign;\n    this.containers = [];\n  }\n\n  // `true` if container matches group requirements, `false` otherwise\n  tryAddContainer(container: EntityContainer): boolean {\n    if (!container.sign.includes(this.includeSign) || !container.sign.excludes(this.excludeSign)) {\n      return false;\n    }\n\n    this.containers.push(container);\n    return true;\n  }\n}\n","import { Type } from './Type';\n\nexport class Sign {\n  constructor(\n    readonly parts: number[]\n  ) {}\n\n  includes(otherSign: Sign): boolean {\n    return this.parts.every((part, index) => {\n      const otherPart = otherSign.parts[index];\n      return (part & otherPart) === otherPart;\n    });\n  }\n\n  excludes(otherSign: Sign): boolean {\n    return this.parts.every((part, index) => {\n      const otherPart = otherSign.parts[index];\n      return (part & otherPart) === 0;\n    });\n  }\n\n  clone(): Sign {\n    return new Sign([...this.parts]);\n  }\n\n  addTypes(types: Type[]): void {\n    types.forEach(type => {\n      type.sign.parts.forEach((mask, index) => {\n        const thisMask = this.parts[index];\n\n        const rest = (thisMask & mask);\n        this.parts[index] += (mask - rest);\n      });\n    });\n  }\n}\n","import { Type } from './Type';\nimport { Sign } from './Sign';\n\nexport class SignManager {\n\n  constructor(\n    public readonly signPartsCount: number\n  ) { }\n\n  createEmpty() {\n    const parts: number[] = [];\n\n    const count = this.signPartsCount;\n    for (let i = 0; i < count; i++) {\n      parts.push(0);\n    }\n\n    return new Sign(parts);\n  }\n\n  createFromTypes(types: Type[]): Sign {\n    const sign = this.createEmpty();\n    sign.addTypes(types);\n\n    return sign;\n  }\n}\n","import { Sign } from './Sign';\n\nexport class Type {\n  constructor(\n    public readonly id: number,\n    public readonly sign: Sign\n  ) {}\n}\n\n","import { SignManager } from './SignManager';\nimport { Type } from './Type';\n\n\nexport class TypeManager<T extends object> {\n  readonly registry: WeakMap<T, Type>;\n  readonly signManager: SignManager;\n\n  nextId: number;\n  nextPart: number;\n  nextPartIndex: number;\n  halfMaxPart: number;\n\n  constructor(signManager: SignManager) {\n    this.registry = new WeakMap();\n    this.signManager = signManager;\n\n    this.nextId = 0;\n    this.nextPart = 2;\n    this.nextPartIndex = 0;\n    this.halfMaxPart = Math.pow(2, 30) / 2;\n  }\n\n  getType(constructor: T) {\n    return this.registry.get(constructor);\n  }\n\n  register(constructor: T) {\n    const existed = this.registry.get(constructor);\n    if (existed) {\n      return existed;\n    }\n\n    const signature = this.signManager.createEmpty();\n    signature.parts[this.nextPartIndex] = this.nextPart;\n\n    const type = new Type(this.nextId, signature);\n    this.registry.set(constructor, type);\n\n    if (this.nextPart > this.halfMaxPart) {\n      this.nextPart = 2;\n      this.nextPartIndex++;\n    } else {\n      this.nextPart *= 2;\n    }\n\n    this.nextId++;\n\n    return type;\n  }\n}\n","import { Type } from '../Type';\nimport { Sign } from '../Sign';\nimport { Entity } from '../Entity';\nimport { ExtensionBase } from './ExtensionBase';\n\nexport class ComponentsExtension extends ExtensionBase {\n  setComponents(entityId: number, values: any[]) {\n    const entity = this.entities[entityId];\n\n    const oldContainer = entity.container;\n\n    const addingTypes = this._getTypesFromValues(values);\n    const oldTypes = oldContainer.types;\n\n    const allTypes = [...addingTypes, ...oldTypes];\n    const sign = this.signManager.createFromTypes(allTypes);\n\n    const newContainer = this._findOrCreateContainer(sign, allTypes);\n\n    const removedValues = oldContainer.removeEntity(entity);\n    const allValues = [...values, ...removedValues];\n\n    newContainer.addEntity(entity, allTypes, allValues);\n  }\n\n  removeComponents(entityId: number, Constructors: any[]) {\n    const entity = this.entities[entityId];\n\n    const oldContainer = entity.container;\n\n    const removingTypes = this._getTypesFromConstructors(Constructors);\n    const oldTypes = oldContainer.types;\n    const newTypes = oldTypes.filter(type => !removingTypes.includes(type));\n\n    const sign = this.signManager.createFromTypes(newTypes);\n\n    const newContainer = this._findOrCreateContainer(sign, newTypes);\n\n    const removedValues = oldContainer.removeEntity(entity);\n\n    if (!newContainer.addEntity) {\n      console.log(sign, newTypes, this);\n    }\n    newContainer.addEntity(entity, oldTypes, removedValues);\n  }\n}\n","import { Type } from '../Type';\nimport { Sign } from '../Sign';\nimport { Entity } from '../Entity';\nimport { ExtensionBase } from './ExtensionBase';\n\nexport class EntityExtension extends ExtensionBase {\n  createEntity(values: any[]) {\n    const entity = this._createOrReuseEntity();\n    const types = this._getTypesFromValues(values);\n    const sign = this.signManager.createFromTypes(types);\n    const container = this._findOrCreateContainer(sign, types);\n\n    container.addEntity(entity, types, values);\n\n    return entity.id;\n  }\n\n  removeEntity(entityId: number) {\n    const entity = this.entities[entityId];\n    entity.container.removeEntity(entity);\n    this.entitiesPool.push(entity);\n  }\n\n  private _createOrReuseEntity() {\n    let entity;\n\n    if (this.entitiesPool.length > 0) {\n      entity = this.entitiesPool.pop();\n    }\n    else {\n      entity = new Entity(this.entities.length);\n      this.entities.push(entity);\n    }\n\n    return entity;\n  }\n}\n","import { Entity } from '../Entity';\nimport { EntityContainerManager } from '../EntityContainerManager';\nimport { EntityQuery } from '../EntityQuery';\nimport { Sign } from '../Sign';\nimport { SignManager } from '../SignManager';\nimport { Type } from '../Type';\nimport { TypeManager } from '../TypeManager';\n\nexport interface IExtensionContext {\n  entities: Entity[];\n  entitiesPool: Entity[];\n\n  queries: EntityQuery[];\n\n  typeManager: TypeManager<any>;\n  signManager: SignManager;\n  containerManager: EntityContainerManager;\n}\n\nexport abstract class ExtensionBase {\n  entities: Entity[];\n  entitiesPool: Entity[];\n  queries: EntityQuery[];\n  typeManager: TypeManager<any>;\n  signManager: SignManager;\n  containerManager: EntityContainerManager;\n\n  constructor(\n    context: IExtensionContext\n  ) {\n    this.entities = context.entities;\n    this.entitiesPool = context.entitiesPool;\n    this.queries = context.queries;\n    this.typeManager = context.typeManager;\n    this.signManager = context.signManager;\n    this.containerManager = context.containerManager;\n  }\n\n  protected _findOrCreateContainer(sign: Sign, types: Type[]) {\n    const existedContainer = this.containerManager.getContainer(sign);\n\n    if (existedContainer) {\n      return existedContainer;\n    }\n\n    return this._createContainer(sign, types);\n  }\n\n  protected _createContainer(sign: Sign, types: Type[]) {\n    const container = this.containerManager.create(sign, types);\n    this.queries.forEach(query => query.tryAddContainer(container));\n\n    return container;\n  }\n\n  protected _getTypesFromValues(values: any[]) {\n    return values.map(value => this.typeManager.getType(value.constructor));\n  }\n\n  protected _getTypesFromConstructors(Constructors: any[]) {\n    return Constructors.map(Constructor => this.typeManager.getType(Constructor));\n  }\n}\n","import { Type } from '../Type';\nimport { Sign } from '../Sign';\nimport { Entity } from '../Entity';\nimport { ExtensionBase } from './ExtensionBase';\nimport { EntityQuery } from '../EntityQuery';\n\nexport class QueryExtension extends ExtensionBase {\n  createQuery(include: any[], exclude: any[]): EntityQuery {\n    const includeTypes = this._getTypesFromConstructors(include);\n    const excludeTypes = this._getTypesFromConstructors(exclude);\n\n    const includeSign = this.signManager.createFromTypes(includeTypes);\n    const excludeSign = this.signManager.createFromTypes(excludeTypes);\n    const query = new EntityQuery(includeSign, excludeSign);\n\n    this.queries.push(query);\n    this.containerManager.containers.forEach(container => query.tryAddContainer(container));\n\n    return query;\n  }\n}\n","import { EntityManager } from './entities/EntityManager';\nimport { SignManager } from './entities/SignManager';\nimport { TypeManager } from './entities/TypeManager';\n\nconst ENTITIES_COUNT = (window as any).ENTITIES_COUNT || 10000;\n\n// Component Constructor\nclass MoveTarget {\n  constructor(\n    public source: number,\n    public target: number,\n    public speed: number,\n    public isDone: boolean = false\n  ) {}\n}\n\n// Component Constructor\nclass MoveTargetDoneTag {}\n\n// Component Constructor\nclass LoadingProgress {\n  constructor(\n    public readonly speed: number\n  ) {}\n}\n\n// sign manager, first argument is length of sign (amount of bit masks)\nconst sm = new SignManager(2);\n// type manager holds types of components\nconst tm = new TypeManager(sm);\n// entity manager is root API object\nconst em = new EntityManager(tm);\n\n// register components by constructor\nem.registerComponent(MoveTarget);\nem.registerComponent(LoadingProgress);\nem.registerComponent(MoveTargetDoneTag);\n\n// for fps\nconst textView = document.querySelector('#text');\n\n// query entity with LoadingProgress and without MoveTarget\nconst loadingProgressQuery = em.createQuery([LoadingProgress], [MoveTarget]);\n\n// query entity with MoveTarget and without MoveTargetDoneTag\nconst moveProgressQuery = em.createQuery([MoveTarget], [MoveTargetDoneTag]);\n\n// query entity with MoveTarget and MoveTargetDoneTag\nconst moveDoneQuery = em.createQuery([MoveTarget, MoveTargetDoneTag], []);\n\nlet fps = 0;\n// just for a test routine\nlet sum = 0;\n\n// create entities\nconst create = () => {\n  for(let i = 0; i < ENTITIES_COUNT; i++) {\n    em.createEntity(new LoadingProgress(1));\n  }\n}\n\n// update loadingProgressQuery, called each frame\nconst updateLoadings = () => {\n  loadingProgressQuery.containers.forEach(container => {\n    const dataArray = container.getComponent(LoadingProgress);\n\n    for(let i = 0; i < container.count; i++) {\n      const entity = container.entities[i];\n      const loadOptions = dataArray[i];\n      em.setComponents(entity.id, new MoveTarget(0, 1, loadOptions.speed));\n    }\n  });\n};\n\n// update moveProgressQuery, called each frame\nconst updateMove = () => {\n  moveProgressQuery.containers.forEach(container => {\n    const moveArray = container.getComponent(MoveTarget);\n\n    for(let i = 0; i < container.count; i++) {\n      const entity = container.entities[i];\n      const move = moveArray[i];\n\n      move.speed -= 0.05;\n      sum += move.speed;\n\n\n      if (move.speed <= 0) {\n        move.isDone = true;\n        em.setComponents(entity.id, new MoveTargetDoneTag());\n      }\n    }\n  });\n};\n\n// update moveDoneQuery, called each frame\nconst updateDone = () => {\n  moveDoneQuery.containers.forEach(container => {\n    const moveArray = container.getComponent(MoveTarget);\n\n    for(let i = 0; i < container.count; i++) {\n      const entity = container.entities[i];\n      const move = moveArray[i];\n\n      move.source = 1;\n      move.target = 0;\n      move.speed = 1;\n      move.isDone = false;\n\n      em.removeComponents(entity.id, MoveTargetDoneTag);\n    }\n  });\n};\n\n// for fps\nlet startTime = Date.now();\n\n// main tick\nconst update = () => {\n  // kind-a systems running\n  updateLoadings();\n  updateMove();\n  updateDone();\n\n  // update fps in that way: fps++\n  fps++;\n\n  // fps counting\n  const endTime = Date.now();\n  const diff = endTime - startTime;\n\n  if (diff >= 1000) {\n    startTime = endTime;\n    console.log(fps);\n    textView.innerHTML = `update ${ENTITIES_COUNT} entities in ${fps}`;\n    sum = 0;\n    fps = 0;\n  }\n\n  // request for next frame\n  requestAnimationFrame(update);\n};\n\ncreate();\nupdate();\n\n(window as any).update = update;\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import './test';"],"sourceRoot":""}